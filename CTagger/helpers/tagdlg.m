% tagdlg
% GUI helper for selectmaps
%
% Usage:
%   >>  [response, primary] = tagdlg(fieldname, fieldValues)
%
% Description:
% [response, primary] = tagdlg(fieldname, fieldValues) brings up a GUI 
% that is a helper for selectmaps
%
% Function documentation:
% Execute the following in the MATLAB command window to view the function
% documentation for tagdlg:
%
%    doc tagdlg
% See also: tageeg, tagstudy, tagdir, tagcsv
%
% Copyright (C) Kay Robbins, Jeremy Cockfield, and Thomas Rognon, UTSA,
% 2011-2015, kay.robbins.utsa.edu jeremy.cockfield.utsa.edu
%
% This program is free software; you can redistribute it and/or modify
% it under the terms of the GNU General Public License as published by
% the Free Software Foundation; either version 2 of the License, or
% (at your option) any later version.
%
% This program is distributed in the hope that it will be useful,
% but WITHOUT ANY WARRANTY; without even the implied warranty of
% MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
% GNU General Public License for more details.
%
% You should have received a copy of the GNU General Public License
% along with this program; if not, write to the Free Software
% Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
%
% $Log: tagdlg.m,v $
% $Revision: 2.0 10-Jul-2015 14:42:39 $
% $Initial version $
%

function [response, primary] = tagdlg(fieldname, fieldValues)

% Setup the variables used by the GUI
response = 'Cancel';
primary = true;
primaryCtrl = '';
if isempty(fieldname) || isempty(fieldValues)
    return;
end
maxLines = 10;
theTitle = ['Do you want to tag ' fieldname ' field [' ...
    num2str(length(fieldValues)) ' value(s)]?'];
numFields = 1; %#ok<NASGU>
if isempty(fieldValues)
    displayFields = ' ';
elseif ischar(fieldValues)
    displayFields = fieldValues;
elseif iscellstr(fieldValues)
    numFields = min(maxLines, length(fieldValues));
    displayFields = fieldValues(1:numFields);
    if length(fieldValues) > maxLines
        displayFields{maxLines} = '. . . etc . . .';
    end
end
inputFig = figure( ...
    'MenuBar', 'none', ...
    'Name', theTitle, ...
    'NextPlot', 'add', ...
    'NumberTitle','off', ...
    'Resize', 'on', ...
    'Tag', theTitle, ...
    'Toolbar', 'none', ...
    'Visible', 'off', ...
    'WindowStyle', 'modal');
createLayout(fieldname);
movegui(inputFig); % Make sure it is visible
uiwait(inputFig);

    function createButtonPanel()
        % Create the button panel on the side of GUI
        buttonPanel = uipanel('BorderType','none', ...
            'BackgroundColor',[.94 .94 .94],...
            'FontSize',12,...
            'Position',[0.2 0 .6 .2]);
        uicontrol('Parent', buttonPanel, ...
            'Style', 'pushbutton', 'Tag', 'TagButton', ...
            'String', 'Tag', 'Enable', 'on', 'Tooltip', ...
            ['Tag values associated with ' fieldname], ...
            'Units','normalized', ...
            'Callback', {@buttonCallback, 'Tag'}, ...
            'Position',[0.01 0.3 0.325 0.4]);
        uicontrol('Parent', buttonPanel, ...
            'Style', 'pushbutton', 'Tag', 'RemoveButton', ...
            'String', 'Exclude', 'Enable', 'on', 'Tooltip', ...
            ['Exclude field ' fieldname ' from tagging'], ...
            'Units','normalized', ...
            'Callback', {@buttonCallback, 'Exclude'}, ...
            'Position',[0.34 .3 0.325 0.4]);
        uicontrol('Parent', buttonPanel, ...
            'Style', 'pushbutton', 'Tag', 'CancelButton', ...
            'String', 'Cancel', 'Enable', 'on', 'Tooltip', ...
            'Cancel with no changes', ...
            'Units','normalized', ...
            'Callback', {@buttonCallback, 'Cancel'}, ...
            'Position',[0.67 0.3 0.325 0.4]);
    end % createButtonPanel

    function createLayout(fieldname)
        % Create the layout for the GUI but do not display
        createPrimaryFieldPanel();
        createValuePanel(fieldname);
        createButtonPanel();
    end % createLayout

    function createPrimaryFieldPanel()
        % Create the button panel on the side of GUI
        primaryFieldPanel = uipanel('BorderType','none', ...
            'BackgroundColor',[.94 .94 .94],...
            'FontSize',12,...
            'Position',[0 .7 1 .3]);
        primaryCtrl = uicontrol('Parent', primaryFieldPanel, ...
            'Style', 'CheckBox', 'Tag', 'SelectOptionCB', ...
            'String', ...
            'Primary field (requires label, category, and description)', ...
            'Enable', 'on', ...
            'Tooltip', ...
            'If checked, this is a primary field', ...
            'Units','normalized', ...
            'Position', [0.01 0.5 0.9 0.3]);
        set(primaryCtrl, 'Value', get(primaryCtrl, 'Max'));
    end

    function createValuePanel(fieldname)
        valuePanel = uipanel('Title', ...
            ['The ' fieldname ' field has values:'], ...
            'BackgroundColor',[.94 .94 .94],...
            'FontSize',12,...
            'Position',[0 .3 1 .5]);
        uicontrol('Parent', valuePanel, ...
            'Style','text', 'String', displayFields, ...
            'Enable', 'on', ...
            'Units','normalized',...
            'HorizontalAlignment', 'Left', ...
            'Callback', @primaryCallback, ...
            'Position', [0.05 0.1 0.1 0.8]);
    end

    function saveAllCallback(src, eventdata) %#ok<INUSD>
        primary = get(src, 'Max') == get(src, 'Value');
    end % saveAllCallback

    function buttonCallback(src, eventdata, responseValue) %#ok<INUSL>
        % Callback for browse button sets a directory for control
        response = responseValue;
        primary  = get(primaryCtrl, 'Max') == get(primaryCtrl, 'Value');
        close(inputFig);
    end % buttonCtrlCallback

end % tagdlg