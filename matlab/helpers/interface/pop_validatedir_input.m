% GUI for input needed to create inputs for pop_validatedir.
%
% Usage:
%
%
%   >>  [canceled, doSubDirs, generateWarnings, hedXML, inDir, ...
%        outDir] = pop_validatedir_input()
%
%   >>  [canceled, doSubDirs, generateWarnings, hedXML, inDir, ...
%        outDir] = pop_validatedir_input(varargin)
%
% Input:
%
%   Optional (key/value):
%
%   'DoSubDirs'
%                   If true (default), the entire inDir directory tree is
%                   searched. If false, only the inDir directory is
%                   searched.
%
%   'GenerateWarnings'
%                   If true, include warnings in the log file in addition
%                   to errors. If false (default), only errors are included
%                   in the log file.
%
%   'HedXml'
%                   The full path to a HED XML file containing all of the
%                   tags. This by default will be the HED.xml file
%                   found in the hed directory.
%   'InDir'
%                   A directory containing tagged EEG datasets that will be
%                   validated.
%
%   'OutputFileDirectory'
%                   The directory where the log files are written to.
%                   There will be a log file generated for each directory
%                   dataset validated. The default directory will be the
%                   current directory. 
%
% Output:
%
%   canceled
%                    True if the cancel button is pressed. False if
%                    otherwise.
%
%   doSubDirs        If true (default), the entire inDir directory tree is
%                    searched. If false, only the inDir directory is
%                    searched.
%
%   generateWarnings
%                   If true, include warnings in the log file in addition
%                   to errors. If false (default), only errors are included
%                   in the log file.
%
%   hedXML
%                   The name or the path of the HED XML file containing
%                   all of the tags.
%
%   inDir
%                    The input directory containing .set files.
%
%   outDir
%                    The output directory.
%
% Copyright (C) 2012-2016 Thomas Rognon tcrognon@gmail.com,
% Jeremy Cockfield jeremy.cockfield@gmail.com, and
% Kay Robbins kay.robbins@utsa.edu
%
% This program is free software; you can redistribute it and/or modify
% it under the terms of the GNU General Public License as published by
% the Free Software Foundation; either version 2 of the License, or
% (at your option) any later version.
%
% This program is distributed in the hope that it will be useful,
% but WITHOUT ANY WARRANTY; without even the implied warranty of
% MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
% GNU General Public License for more details.
%
% You should have received a copy of the GNU General Public License
% along with this program; if not, write to the Free Software
% Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA

function [canceled, doSubDirs, generateWarnings, hedXML, inDir, ...
    outDir] = pop_validatedir_input(varargin)
% Setup the variables used by the GUI
p = parseArguments(varargin{:});
hedXMLCtrl = '';
outDirCtrl = '';
inDirCtrl = '';
canceled = true;
generateWarnings = p.GenerateWarnings;
hedXML = p.HedXml;
inDir = p.InDir;
outDir = p.OutputFileDirectory;
doSubDirs = p.DoSubDirs;
title = ['Inputs for validating the HED tags in a directory of EEG' ...
    ' data files'];
fig = createFigure(title);
addFigureComponents(fig);
movegui(fig);
uiwait(fig);

    function addBrowserComponents(browserPanel)
        % Adds components to the browser panel
        addBrowserLabels(browserPanel);
        addBrowserEditBoxes(browserPanel);
        addBrowserButtons(browserPanel);
    end % addBrowserComponents

    function addBrowserButtons(browserPanel)
        % Adds button components to the browser panel
        uicontrol('Parent', browserPanel, ...
            'string', 'Browse', ...
            'style', 'pushbutton', ...
            'TooltipString', 'Press to bring up file chooser', ...
            'Units','normalized',...
            'Callback', {@browseInputDirectoryCallback, ...
            'Browse for input directory'}, ...
            'Position', [0.775 .8 0.21 0.2]);
        uicontrol('Parent', browserPanel, ...
            'string', 'Browse', ...
            'style', 'pushbutton', ...
            'TooltipString', 'Press to bring up file chooser', ...
            'Units', 'normalized',...
            'Callback', {@browseHedXMLCallback, ...
            'Browse for HED XML file'}, ...
            'Position', [0.775 .5 0.21 0.2]);
        uicontrol('Parent', browserPanel, ...
            'string', 'Browse', ...
            'style', 'pushbutton', ...
            'TooltipString', 'Press to bring up file chooser', ...
            'Units', 'normalized',...
            'Callback', {@browseOutputDirectoryCallback, ...
            'Browse for ouput directory'}, ...
            'Position', [0.775 .2 0.21 0.2]);
    end % addBrowserButtons

    function addBrowserEditBoxes(browserPanel)
        % Adds edit box components to the browser panel
        inDirCtrl = uicontrol('Parent', browserPanel, ...
            'Style', 'edit', ...
            'BackgroundColor', 'w', ...
            'HorizontalAlignment', 'Left', ...
            'Tag', 'InputDirEB', ...
            'String', inDir, ...
            'TooltipString', ['Directory containing EEG .set data' ...
            ' files.'], ...
            'Units','normalized',...
            'Callback', @inputDirEditBoxCallback, ...
            'Position', [0.15 0.8 0.6 0.2]);
        hedXMLCtrl = uicontrol('Parent', browserPanel, ...
            'Style', 'edit', ...
            'BackgroundColor', 'w', ...
            'HorizontalAlignment', 'Left', ...
            'Tag', 'HEDXMLEB', ...
            'String', hedXML, ...
            'TooltipString', 'The HED XML file.', ...
            'Units','normalized',...
            'Callback', {@hedEditBoxCallback}, ...
            'Position', [0.15 0.5 0.6 0.2]);
        outDirCtrl = uicontrol('Parent', browserPanel, ...
            'Style', 'edit', ...
            'BackgroundColor', 'w', ...
            'HorizontalAlignment', 'Left', ...
            'Tag', 'OutputDirEB', ...
            'String', outDir, ...
            'TooltipString', ['A directory where the validation output' ...
            ' is written to.'], ...
            'Units','normalized',...
            'Callback', {@outputDirEditBoxCallback}, ...
            'Position', [0.15 0.2 0.6 0.2]);
    end % addBrowserEditBoxes

    function addBrowserLabels(browserPanel)
        % Adds label components to the browser panel
        uicontrol('Parent', browserPanel, ...
            'Style','text', ...
            'String', 'Input directory', ...
            'Units','normalized',...
            'HorizontalAlignment', 'Left', ...
            'Position', [0.015 0.75 0.1 0.25]);
        uicontrol('Parent', browserPanel, ...
            'Style','text', ...
            'String', 'HED file', ...
            'Units','normalized',...
            'HorizontalAlignment', 'Left', ...
            'Position', [0.015 0.35 0.12 0.3]);
        uicontrol('parent', browserPanel, ...
            'Style', 'Text', ...
            'Units', 'normalized', ...
            'String', 'Output directory', ...
            'HorizontalAlignment', 'Left', ...
            'Position', [0.015 0.2 0.12 0.2]);
    end % addBrowserLabels

    function addFigureComponents(fig)
        % Adds components to the figure
        [browserPanel, optionPanel, sumissionPanel] = ...
            createPanels(fig);
        addBrowserComponents(browserPanel);
        addOptionComponents(optionPanel);
        addSubmissionComponents(fig, sumissionPanel);
    end % addFigureComponents

    function addOptionComponents(optionPanel)
        % Adds components to the option panel
        uicontrol('Parent', optionPanel, ...
            'Style', 'CheckBox', ...
            'Tag', 'ValidateAllCB', ...
            'String', 'Look in subdirectories', ...
            'Enable', 'on', ...
            'Tooltip', ['If checked, the subdirectories will be looked' ...
            ' in for .set files'], ...
            'Value', doSubDirs, ...
            'Units','normalized', ...
            'Callback', @doSubDirsCallback, ...
            'Position', [0.1 0.6 0.8 0.3]);
        uicontrol('Parent', optionPanel, ...
            'Style', 'CheckBox', ...
            'String', 'Include warnings in log file', ...
            'Enable', 'on', ...
            'Tooltip', ['Check to include warnings in the log file in' ...
            ' addition to errors. If unchecked only errors are' ...
            ' included in the log file'], ...
            'Value', generateWarnings, ...
            'Units','normalized', ...
            'Callback', @genearteWarningsCallback, ...
            'Position', [0.1 0.15 0.8 0.3]);
    end % addOptionComponents

    function addSubmissionComponents(fig, submissionPanel)
        % Adds components to the submission panel
        uicontrol('Parent', submissionPanel, ...
            'Style', 'pushbutton', ...
            'String', 'Okay', ...
            'Enable', 'on', ...
            'Tooltip', 'Okay the directory tagging', ...
            'Units','normalized', ...
            'Callback', {@okayButtonCallback, fig}, ...
            'Position',[0.21 0.1 0.21 .5]);
        uicontrol('Parent', submissionPanel, ...
            'Style', 'pushbutton', ...
            'String', 'Cancel', ...
            'Enable', 'on', ...
            'Tooltip', 'Cancel the directory tagging', ...
            'Units','normalized', ...
            'Callback', {@cancelButtonCallback, fig}, ...
            'Position',[0.44 0.1 0.21 .5]);
        uicontrol('Parent', submissionPanel, ...
            'Style', 'pushbutton', ...
            'String', 'Help', ...
            'Enable', 'on', ...
            'Tooltip', 'Help for directory tagging', ...
            'Units', 'normalized', ...
            'Callback', @helpButtonCallback, ...
            'Position',[0.67 0.1 0.21 .5]);
    end % addSubmissionComponents

    function [browserPanel, optionPanel, sumissionPanel] = ...
            createPanels(fig)
        % Creates the panels in the figure
        browserPanel = uipanel(fig, ...
            'BorderType','none', ...
            'BackgroundColor',[.94 .94 .94],...
            'FontSize', 12,...
            'Position',[0 .575 1 .4]);
        optionPanel = uipanel(fig, ...
            'BackgroundColor',[.94,.94,.94],...
            'FontSize', 12,...
            'Title','Additional options', ...
            'Position',[0.15 0.3 0.6 0.2]);
        sumissionPanel = uipanel(fig, ...
            'BorderType','none', ...
            'BackgroundColor',[.94 .94 .94],...
            'FontSize', 12,...
            'Position', [0.37 .025 .7 .15]);
    end % createPanels

    function browseHedXMLCallback(src, eventdata, myTitle) %#ok<INUSL>
        % Callback for 'Browse' button that sets the 'HED' editbox
        [tFile, tPath] = uigetfile({'*.xml', 'XML files (*.xml)'}, ...
            myTitle);
        if tFile ~= 0
            hedXML = fullfile(tPath, tFile);
            set(findobj('Tag', 'HEDXMLEB'), 'String', hedXML);
        end
    end % browseHedXMLCallback

    function browseInputDirectoryCallback(~, ~, myTitle)
        % Callback for 'Browse' button to set the 'Input directory'
        % editbox
        startPath = get(findobj('Tag', 'OutputDirEB'), 'String');
        if isempty(startPath) || ~ischar(startPath) || ~isdir(startPath)
            startPath = pwd;
        end
        dName = uigetdir(startPath, myTitle);
        if dName ~=0
            set(findobj('Tag', 'InputDirEB'), 'String', dName);
            inDir = dName;
        end
    end % browseInputDirectoryCallback

    function browseOutputDirectoryCallback(~, ~, myTitle)
        % Callback for 'Browse' button to set the 'Output directory'
        % editbox
        startPath = get(findobj('Tag', 'OutputDirEB'), 'String');
        if isempty(startPath) || ~ischar(startPath) || ~isdir(startPath)
            startPath = pwd;
        end
        dName = uigetdir(startPath, myTitle);
        if dName ~=0
            set(findobj('Tag', 'OutputDirEB'), 'String', dName);
            outDir = dName;
        end
    end % browseOutputDirectoryCallback

    function cancelButtonCallback(~, ~, fig)
        % Callback for 'Cancel' button
        canceled = true;
        close(fig);
    end % cancelButtonCallback

    function fig = createFigure(title)
        % Creates the figure with the given title
        fig = figure( ...
            'Color', [.94 .94 .94], ...
            'MenuBar', 'none', ...
            'Name', title, ...
            'NextPlot', 'add', ...
            'NumberTitle','off', ...
            'Resize', 'on', ...
            'Tag', title, ...
            'Toolbar', 'none', ...
            'Visible', 'off', ...
            'WindowStyle', 'modal');
    end % createFigure

    function genearteWarningsCallback(src, ~)
        % Callback for generate warnings checkbox
        generateWarnings = get(src, 'Max') == get(src, 'Value');
    end % genearteWarningsCallback

    function hedEditBoxCallback(src, ~)
        % Callback for user directly editing the HED XML editbox
        xml = get(src, 'String');
        hedXML = xml;
    end % hedEditBoxCallback

    function helpButtonCallback(~, ~)
        % Callback for the okay button
        helpdlg(sprintf(['Validates the HED tags in a directory' ...
            ' containing .set EEG datasets against a HED schema.' ...
            ' \n\n***Main Options***' ...
            '\n\nInput directory - Please specify a' ...
            ' directory of datasets that you want to be validated.' ...
            ' The dataset files should have the .set extension.' ...
            ' \n\nHED file - The latest HED' ...
            ' schema. This will be the HED.xml file found in the hed' ...
            ' directory by default.\n\nOutput directory - The' ...
            ' directory where the validation files are written to.' ...
            ' The default output directory will be the' ...
            ' current directory.\n\n ***Additional Options***\n\n' ...
            ' Look in subdirectories - By default the validation looks' ...
            ' in the subdirectories for more datasets. To only look in' ...
            ' the top level of the directory uncheck this.' ...
            ' \n\nInclude warnings in log file - Check to include' ...
            ' warnings in the log file in addition to errors. If' ...
            ' unchecked only errors are included in the log file.']), ...
            'Input Description')
    end % helpButtonCallback

    function okayButtonCallback(~, ~, fig)
        % Callback for the okay button
        if isempty(get(hedXMLCtrl, 'String'))
            errordlg('HED file is empty', 'Input required', 'modal');
        elseif ~exist(get(hedXMLCtrl, 'String'), 'file')
            errordlg('HED file does not exist', 'Invalid Input', 'modal');
        elseif isempty(get(inDirCtrl, 'String'))
            errordlg('Input directory is empty', 'Input required', ...
                'modal');
        elseif ~exist(get(inDirCtrl, 'String'), 'file')
            errordlg('Input directory does not exist', ...
                'Input required', 'modal');
        elseif isempty(get(outDirCtrl, 'String'))
            errordlg('Output directory is empty', 'Input required', ...
                'modal');
        else
            canceled = false;
            close(fig);
        end
    end % okayButtonCallback

    function outputDirEditBoxCallback(src, ~)
        % Callback for user directly editing the output directory edit box
        directory = get(src, 'String');
        outDir = directory;
    end % outputDirEditBoxCallback

    function p = parseArguments(varargin)
        % Parses the input arguments and returns the results
        parser = inputParser;
        parser.addParamValue('DoSubDirs', true, @islogical);
        parser.addParamValue('GenerateWarnings', false, ...
            @(x) validateattributes(x, {'logical'}, {}));
        parser.addParamValue('HedXml', which('hed.xml'), ...
            @(x) (~isempty(x) && ischar(x)));
        parser.addParamValue('InDir', '', @(x) (~isempty(x) && ischar(x)));
        parser.addParamValue('OutputFileDirectory', pwd, @ischar);
        parser.parse(varargin{:});
        p = parser.Results;
    end % parseArguments

    function inputDirEditBoxCallback(src, ~)
        % Callback for user directly editing the study edit box
        study = get(src, 'String');
        inDir = study;
    end % inputDirEditBoxCallback

    function doSubDirsCallback(src, ~)
        % Callback for user directly editing the 'Look in subdirectories'
        % checkbox
        doSubDirs = get(src, 'Max') == get(src, 'Value');
    end % doSubDirsCallback

end % tagstudy_input