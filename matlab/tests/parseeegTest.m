function tests = parseeegTest
tests = functiontests(localfunctions);
end % parseeegTest

function setupOnce(testCase)
testCase.TestData.hedXML = 'HED.xml';
testCase.TestData.EEG1.event(1).usertags = '';
testCase.TestData.EEG2.event(1).usertags = ['Event/Label/Test1,' ...
    'Event/Category/Participant response,' ...
    'Event/Description/This is a test,' ...
    '(Participant ~ ' ...
    'Action/Control vehicle/Drive/Collide ~ ' ...
    'Item/Object/Vehicle/Car)'];
testCase.TestData.EEG3.event(1).usertags = ['Event/Label/Test1,' ...
    'Event/Category/Participant response,' ...
    'Event/Description/This is a test (Participant ~ ' ...
    'Action/Control vehicle/Drive/Collide ~ ' ...
    'Item/Object/Vehicle/Car)'];
testCase.TestData.EEG4.event(1).usertags = ['(Participant ~ ' ...
    'Action/Control vehicle/Drive/Collide ~ ' ...
    'Item/Object/Vehicle/Car),' ...
    'Event/Label/Test1,' ...
    'Event/Category/Participant response,'];
end

function testParseEEG(testCase) 
% Unit test for editmaps
fprintf('\nUnit tests for parseeeg\n');

fprintf('\nIt should return no errors when there is a empty HED string');
errors = parseeeg(testCase.TestData.hedXML, testCase.TestData.EEG1.event, false);
testCase.verifyTrue(isempty(errors));

fprintf('\nIt should return no errors when the HED string is valid');
errors = parseeeg(testCase.TestData.hedXML, testCase.TestData.EEG2.event, false);
testCase.verifyTrue(isempty(errors));

fprintf(['\nIt should return errors when there is a missing comma' ...
    ' before a group']);
errors = parseeeg(testCase.TestData.hedXML, testCase.TestData.EEG3.event, false);
testCase.verifyFalse(isempty(errors));

fprintf(['\nIt should return errors when there is a required tag' ...
    ' missing']);
errors = parseeeg(testCase.TestData.hedXML, testCase.TestData.EEG4.event, false);
testCase.verifyFalse(isempty(errors));
end